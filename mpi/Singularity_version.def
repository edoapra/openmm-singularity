Bootstrap: docker
#From: ubuntu:22.04
#From: nvidia/cuda:11.7.0-runtime-ubuntu22.04
From: nvidia/cuda:{{ CUDA_VERSION }}-runtime-ubuntu22.04
Stage: spython-base

%arguments
   CUDA_DRIVER_VERSION=530
   CUDA_VERSION=12.2.0


%files
%labels
maintainer  Edoardo Apra <edoardo.apra@pnnl.gov>
org.opencontainers.image.version  "1.0.0"
org.opencontainers.image.authors  "Edoardo Apra"
%post

apt-get -q update && DEBIAN_FRONTEND=noninteractive apt-get -q install -y wget libstdc++6 gcc g++ gfortran tzdata lsof && \
ln -fs /usr/share/zoneinfo/America/Los_Angeles /etc/localtime && \
dpkg-reconfigure --frontend noninteractive tzdata && \
echo CUDA_DRIVER_VERSION is {{ CUDA_DRIVER_VERSION }} && \
apt-get install -y  nvidia-utils-{{ CUDA_DRIVER_VERSION }} nvidia-compute-utils-{{ CUDA_DRIVER_VERSION }} && \
 rm -rf /var/lib/apt/lists/* && \
 apt-get autoremove -y && \
 dpkg-query -Wf '${Installed-Size}\t${Package}\n' | sort -n |tail -120 && \
 apt-get clean

echo ' which python' $(which python)
echo ' python -V ' $(python -V) ||true
echo ' python3 -V ' $(python3 -V) ||true
#install openmpi
apt-get update \
&& apt-get -y install -y   tar libnl-3-200 libnl-route-3-200 libgomp1 libnuma1 \
 g++  make ssh patch   unzip perl-base file \
 python3 python3-dev cmake  unzip zip perl automake libtool autoconf flex  \
 libnuma-dev libslurm-dev libpmi2-0-dev libpmi0-dev  libnl-3-dev libnl-route-3-dev udev \
 librdmacm-dev librdmacm1 rdma-core libibverbs-dev  ibverbs-providers  \
 libhwloc-dev \
 pkg-config gawk  software-properties-common \
&& export ompi=4.1.4\
&& export ompi_prefix=ompi-$ompi\
&& export OMPI_DIR=/opt/ompi\
&& export SINGULARITY_ompi=4.1.4\
&& export SINGULARITY_ompi_prefix=ompi-$ompi\
&& export PATH=$OMPI_DIR/bin:$PATH \
&& export LD_LIBRARY_PATH=$OMPI_DIR/lib:$LD_LIBRARY_PATH \
&& wget --progress=dot:giga https://github.com/open-mpi/ompi/archive/v$ompi.tar.gz -O - | tar xzf -   \
&& cd $ompi_prefix                                                        && \
./autogen.pl                                                           && \
./configure  --prefix=$OMPI_DIR --without-ucx --enable-mca-no-build=btl-uct   \
--disable-mpi-fortran \
 --with-pmi --with-pmi-libdir=/usr/lib/x86_64-linux-gnu --enable-mpi1-compatibility --with-slurm --without-tm --without-lsf  \
 --without-sge --without-alps --without-lustre --disable-memchecker \
 --without-hcoll --disable-static  \
--disable-mpi-java --enable-dlopen --without-cuda --without-verbs \
--disable-mpi-cxx --disable-cxx-exceptions  \
&& make -j 6                                                  \
&&make install                                                             \
&& make clean                                                               \
&& cd .. ; rm -rf *tar*gz $ompi-prefix ucx-$ucx  \
&& echo ' mpicc' `/opt/ompi/bin/mpicc -show || true` \
&& echo '********'  \
&& export PATH=$OMPI_DIR/bin:$PATH  \
&& export LD_LIBRARY_PATH=$OMPI_DIR/lib:$LD_LIBRARY_PATH
python -m pip install  --no-binary :all: mpi4py
# might need to compile from source NetCDF & HDF5
# NetCDF (compiled with netcdf4 support) and HDF5
apt-get install -y libhdf5-dev libhdf4-dev libnetcdf-dev
python -m pip install netcdf4-python 


MYPREFIX="/opt/miniconda3"
echo MYPREFIX is $MYPREFIX
wget --quiet -O /tmp/miniconda3.sh \
https://repo.anaconda.com/miniconda/Miniconda3-py39_23.3.1-0-Linux-x86_64.sh && \
 bash /tmp/miniconda3.sh -b -p ${MYPREFIX}  && \
 rm /tmp/miniconda3.sh
export CONDA_FETCH_THREADS=2 # parallel download for recent conda versions
export MAX_JOBS=2 # ninja workers
 eval "$(${MYPREFIX}/bin/conda shell.bash hook)"
#hack to fix miniconda GLIBCXX error
#conda config --set auto_update_conda False
conda install -q -y libstdcxx-ng
ls -l /opt/miniconda3/lib/libstdc++.so.6 /usr/lib/x86_64-linux-gnu/libstdc++.so.6 || true
rm -f /opt/miniconda3/lib/libstdc++.so.6*
cp /usr/lib/x86_64-linux-gnu/libstdc++.so.6 /opt/miniconda3/lib/libstdc++.so.6


conda config --set  fetch_threads 2 || true

conda install  -y -c conda-forge  micromamba
micromamba install  -y -c conda-forge  openmm=7.7.0
micromamba install  -y -c conda-forge  openmm-setup
micromamba install -y -c conda-forge flask=2.1.3
micromamba install -c conda-forge werkzeug=2.0.3

    conda clean -y --force-pkgs-dirs
    du -sk $MYPREFIX/lib/*|sort -n    
    rm -f /usr/local/cuda-*/targets/x86_64-linux/lib/lib*.a
    rm -f $MYPREFIX/lib/*amdg*
#    rm -f $MYPREFIX/lib/*cublas*

python -m openmm.testInstallation

# extra python components for https://github.com/molmod/openmm-tutorial-msbs/blob/main/01_first_steps/02_lennard_jones.ipynb

python -m pip install matplotlib mdtraj nglview numpy pandas
# for repex
python -m pip install scipy numpy
#test with https://github.com/choderalab/gibbs/blob/master/openmm/python/repexmpi.py
%environment
export CUDA=$(echo $CUDA_VERSION |cut -c 1-4)
export OMPI_DIR=/opt/ompi
export PATH=$OMPI_DIR/bin:/opt/miniconda3/bin:/opt/miniconda3/condabin:$PATH
export LD_LIBRARY_PATH=$OMPI_DIR/lib:/usr/local/cuda-${CUDA}/compat:/usr/local/cuda-${CUDA}/lib64:$LD_LIBRARY_PATH
#%runscript
#exec /bin/bash "$@"
#%startscript
#exec /bin/bash "$@"

