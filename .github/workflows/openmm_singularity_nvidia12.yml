name: openmm_apptainer_nvidia12

on:
  push:
    paths-ignore:
      - '*.sh'
      - '*.sbatch'
  pull_request:
  schedule:
    - cron: '0 0 * * SUN'
  repository_dispatch:
    types: [backend_automation]
  workflow_dispatch:
  workflow_call:

jobs:
  build_image:
    runs-on: ubuntu-latest
    strategy:
        fail-fast: false
        matrix:
          include:
            - cuda_version: 12.8.0
              cuda_driver_version: 565
            - cuda_version: 12.6.3
              cuda_driver_version: 565
            - cuda_version: 12.6.3
              cuda_driver_version: 560
            - cuda_version: 12.5.1
              cuda_driver_version: 560
            - cuda_version: 11.2.2
              cuda_driver_version: 560
            - cuda_version: 12.3.2
              cuda_driver_version: 545
            - cuda_version: 12.3.2
              cuda_driver_version: 550
            - cuda_version: 12.4.1
              cuda_driver_version: 545
            - cuda_version: 12.4.1
              cuda_driver_version: 550
            - cuda_version: 0.0.0
              cuda_driver_version: 000
    steps:
    - name: pkg cleanup
      uses: edoapra/ubuntu-pkg-cleanup@main
    - name: check mnt
      shell: bash
      run: |
        ls -lrta /mnt
        sudo mkdir /mnt/tmpdir
        sudo chmod -R uog+rwx /mnt/tmpdir
        echo 'this is a test' > /mnt/tmpdir/test.txt
    - name: bootstrap
      shell: bash
      run: |
        echo "bootstrap=ubuntu:22.04" >> $GITHUB_ENV
    - name: tag
      shell: bash
      run: |
        if [ ${{ matrix.cuda_version }} == "0.0.0" ]; then
        echo "tag=oras://ghcr.io/${{ github.repository }}/openmm-$(echo ${{ env.bootstrap }}|sed -e s/:/_/)" >> $GITHUB_ENV
        else
        echo "tag=oras://ghcr.io/${{ github.repository }}/openmm-cuda${{ matrix.cuda_version }}-driver${{ matrix.cuda_driver_version }}" >> $GITHUB_ENV
        fi
    - name: echo-tag
      run: |
        echo ' the apptainer tag is ' ${{ env.tag }}
    - name: Checkout source
      uses: actions/checkout@v4
      with:
        clean: false
    - name: Load Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    - name: Install apptainer
      env:
        APP_VER: 1.3.4
      run: |
        sudo apt-get install -y  libfuse2 libseccomp2 zlib1g uidmap squashfs-tools squashfuse fuse2fs fuse-overlayfs fakeroot
        wget -q  https://github.com/apptainer/apptainer/releases/download/v${APP_VER}/apptainer_${APP_VER}_amd64.deb 
        wget -q https://github.com/apptainer/apptainer/releases/download/v${APP_VER}/apptainer-suid_${APP_VER}_amd64.deb 
        sudo dpkg -i apptainer*.deb
        rm apptainer*.deb
        which apptainer
        apptainer version
    - name: build an apptainer container
      run: |
        ls -l
        df -h . /tmp
        myargs=" --build-arg CUDA_DRIVER_VERSION=${{ matrix.cuda_driver_version }} \
        --build-arg UBUNTU_VERSION=${{ matrix.ubuntu_version }}  \
        --build-arg CUDA_VERSION=${{ matrix.cuda_version }} "
        myargs+=" --build-arg MY_BOOTSTRAP=${{ env.bootstrap }} "
        echo myargs is $myargs
        apptainer build  \
        $myargs \
        --nv --force --fakeroot /mnt/tmpdir/openmm.sif Singularity_version.def
        ls -lrth /mnt/tmpdir/openmm.sif
      shell: bash
    - name: builddate
      id: build-date
      run: |
        echo "date=$(TZ=America/Los_Angeles date +%Y%m%d_%H%M%S)" >> $GITHUB_ENV
    - name: push to ghcr.io
      run: |
        echo ${{ secrets.GITHUB_TOKEN }} | apptainer remote login -u ${{ github.actor }} --password-stdin oras://ghcr.io
        pwd
        ls -l
        apptainer remote list
        apptainer push /mnt/tmpdir/openmm.sif ${{ env.tag }}:${{ env.date }}
        apptainer push /mnt/tmpdir/openmm.sif ${{ env.tag }}:latest
    - name: test image with apptainer
      run: |
        rm -f /mnt/tmpdir/openmm.sif || true
        apptainer cache clean -f || true
        apptainer pull  -F /mnt/tmpdir/openmm.sif ${{ env.tag }}:${{ env.date }}
        apptainer exec    /mnt/tmpdir/openmm.sif  python  -m openmm.testInstallation
        apptainer exec ${{ env.tag }}:${{ env.date }} ls -lrt /opt/conda/bin |tail || true
        apptainer cache list -v
