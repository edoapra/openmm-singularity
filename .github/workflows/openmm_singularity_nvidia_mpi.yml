name: openmm_apptainer_nvidia_mpi

on:
  push:
    paths-ignore:
      - '*.sh'
      - '*.sbatch'
  pull_request:
  schedule:
    - cron: '0 0 * * SUN'
  repository_dispatch:
    types: [backend_automation]
  workflow_dispatch:
  workflow_call:

jobs:
  build_image:
    runs-on: ubuntu-20.04
    strategy:
        fail-fast: false
        matrix:
          cuda_version:
            - 11.7.1
            - 11.8.0
            - 12.1.1
            - 12.2.0
            - 12.3.2
            - 12.4.1
          cuda_driver_version:
            - 530
            - 545
            - 550
          include:
            - bootstrap: ubuntu:22.04
              cuda_version: 0.0.0
              cuda_driver_version: 000
    steps:
    - name: pkg cleanup
      run: |
        df -h
        if [[ $(uname -s) == "Linux" ]]; then
        ubuntu_ver=$(cat /etc/os-release | grep VERSION_ID |cut -d \" -f 2)
        dpkg-query -Wf '${Installed-Size}\t${Package}\n' | sort -n
        sudo apt-get purge -y azure-cli || true
        sudo apt-get purge -y google-cloud-cli microsoft-edge-stable dotnet-sdk-7.0 dotnet-sdk-6.0 google-chrome-stable firefox
        sudo apt-get purge -y temurin-17-jdk temurin-11-jdk temurin-8-jdk
        if [[ $ubuntu_ver == "20.04" ]]; then
        sudo apt-get purge -y llvm-12-dev llvm-11-dev llvm-10-dev
        sudo apt-get purge -y hhvm
        sudo apt-get purge -y libgl1-mesa-dri
        fi
        if [[ $ubuntu_ver == "22.04" ]]; then
        sudo apt-get purge -y llvm-13-dev llvm-14-dev llvm-15-dev
        fi
        sudo apt-get -y clean
        sudo apt-get autoremove -y 
        dpkg-query -Wf '${Installed-Size}\t${Package}\n' | sort -n
        df -h
        fi
      shell: bash
    - name: tag
      shell: bash
      run: |
        if [ -z ${{ matrix.bootstrap }} ]; then
        echo "tag=oras://ghcr.io/${{ github.repository }}/openmm-cuda${{ matrix.cuda_version }}-driver${{ matrix.cuda_driver_version }}-mpi" >> $GITHUB_ENV
        else
        echo "tag=oras://ghcr.io/${{ github.repository }}/openmm-$(echo ${{ matrix.bootstrap }}|sed -e s/:/_/)-mpi" >> $GITHUB_ENV
        fi
    - name: echo-tag
      run: |
        echo ' the apptainer tag is ' ${{ env.tag }}
    - name: Checkout source
      uses: actions/checkout@v4
      with:
        clean: false
    - name: Load Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    - name: Install apptainer
      env:
        APP_VER: 1.2.5
        APP_FOLDER: 1.2.5
      run: |
        sudo apt-get install -y  libfuse2 libseccomp2 zlib1g uidmap squashfs-tools squashfuse fuse2fs fuse-overlayfs fakeroot
        wget   https://github.com/apptainer/apptainer/releases/download/v${APP_FOLDER}/apptainer_${APP_VER}_amd64.deb
        sudo dpkg -i apptainer_${APP_VER}_amd64.deb
        rm apptainer_${APP_VER}_amd64.deb
        which apptainer
        apptainer version
    - name: build an apptainer container
      run: |
        cd mpi
        myargs=" --build-arg CUDA_DRIVER_VERSION=${{ matrix.cuda_driver_version }} \
        --build-arg CUDA_VERSION=${{ matrix.cuda_version }} "
        if [ ! -z ${{ matrix.bootstrap }}  ]; then
        myargs+=" --build-arg MY_BOOTSTRAP=${{ matrix.bootstrap }} "; fi
        echo myargs is $myargs
        apptainer build  \
        $myargs \
        --nv --force --fakeroot /tmp/openmm.sif Singularity_version.def
        ls -lrth /tmp/openmm.sif
    - name: builddate
      id: build-date
      run: |
        echo "date=$(TZ=America/Los_Angeles date +%Y%m%d_%H%M%S)" >> $GITHUB_ENV
    - name: push to ghcr.io
      run: |
        echo ${{ secrets.GITHUB_TOKEN }} | apptainer remote login -u ${{ github.actor }} --password-stdin oras://ghcr.io
        pwd
        ls -l
        apptainer remote list
        apptainer push /tmp/openmm.sif ${{ env.tag }}:${{ env.date }}
        apptainer push /tmp/openmm.sif ${{ env.tag }}:latest
    - name: test image with apptainer
      run: |
        rm -f /tmp/openmm.sif || true
        apptainer cache clean -f || true
        apptainer pull  -F /tmp/openmm.sif ${{ env.tag }}:${{ env.date }}
        apptainer exec    /tmp/openmm.sif  python  -m openmm.testInstallation
        apptainer exec ${{ env.tag }}:${{ env.date }} ls -lrt /opt/conda/bin |tail || true
        apptainer cache list -v
